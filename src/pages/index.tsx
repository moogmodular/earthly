import Head from "next/head"
import dynamic from "next/dynamic"
import React, { useEffect, useState } from "react"
import Layout from "~/pages/layout"
import EditingStory from "~/components/editing-story"
import { useNDKStore } from "~/store/ndk-store"
import RecentStories from "~/components/recent-stories"
import { useRecentCollectionsStore } from "~/store/recent-collections-store"
import { Alert, AlertDescription, AlertTitle } from "~/components/ui/alert"
import { Terminal } from "lucide-react"
import { NDKNip07Signer } from "@nostr-dev-kit/ndk"
import PassphraseLoginDialog from "~/components/passphrase-login-dialog"

const Map = dynamic(() => import("../components/map"), { ssr: false })

export default function Home() {
  const { initAnonymous, ndkUser, ndk, initSigner } = useNDKStore()
  const { init: recentCollectionInit, collections } =
    useRecentCollectionsStore()

  const [passphraseDialogOpen, setPassphraseDialogOpen] = useState(false)

  useEffect(() => {
    const shouldReconnect = Boolean(localStorage.getItem("shouldReconnect"))
    const storedEncryptedNsec = localStorage.getItem("encryptedNsec")

    if (storedEncryptedNsec) {
      setPassphraseDialogOpen(true)
    }

    const initWithNothing = async () => {
      await initAnonymous()
      await recentCollectionInit()

      if (typeof window.webln !== "undefined") {
        await window.webln.enable()
      } else {
        console.log("webln not found")
      }
    }

    const initWithWigner = async () => {
      const signer = new NDKNip07Signer()
      await initSigner(signer)
      await recentCollectionInit()

      if (typeof window.webln !== "undefined") {
        await window.webln.enable()
      } else {
        console.log("webln not found")
      }
    }

    if (!ndk && shouldReconnect) {
      void initWithWigner()
    } else if (!ndk && !shouldReconnect) {
      void initWithNothing()
    }
  }, [])

  const handleRefusePassphraseLogin = () => {
    localStorage.removeItem("encryptedNsec")
    localStorage.removeItem("shouldReconnect")
    setPassphraseDialogOpen(false)
  }

  const handleRPassphraseLogin = async () => {
    setPassphraseDialogOpen(false)
    if (typeof window.webln !== "undefined") {
      await window.webln.enable()
    } else {
      console.log("webln not found")
    }
    await recentCollectionInit()
  }

  return (
    <>
      <Head>
        <title>earthly</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <main className="flex flex-grow flex-row overflow-auto">
          <div className="flex w-1/3 flex-col gap-2 overflow-y-scroll p-4">
            <Alert variant="destructive">
              <Terminal className="h-4 w-4" />
              <AlertTitle>Warning!</AlertTitle>
              <AlertDescription>
                This website is in early alpha. The events you create are sent
                to <b>wss://relay.earthly.land</b> and can be nuked at any time.
                If the relay is down the relays can be pulled from your metadata
                and be visible to the public.{" "}
                <b>Please do not use this for anything sensitive.</b>{" "}
                <b className={"italic underline"}>
                  However feel free to draw something interesting.
                </b>
              </AlertDescription>
            </Alert>
            <EditingStory />
            <RecentStories />
          </div>
          <div className="flex flex-grow flex-col p-4">
            <Map />
          </div>
          <PassphraseLoginDialog
            open={passphraseDialogOpen}
            onRefuse={() => handleRefusePassphraseLogin()}
            onLogin={() => handleRPassphraseLogin()}
          />
        </main>
      </Layout>
    </>
  )
}
